/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React__default from 'react';
import { usePrefix } from '../../internal/usePrefix.js';
import { ToggletipContent, ToggletipActions, Toggletip, ToggletipButton } from '../Toggletip/index.js';
import { IconButton } from '../IconButton/index.js';
import { Undo } from '@carbon/icons-react';
import { useId } from '../../internal/useId.js';

var _Undo;
const SlugContent = /*#__PURE__*/React__default.forwardRef(function SlugContent(_ref, ref) {
  let {
    children,
    className
  } = _ref;
  const prefix = usePrefix();
  const slugContentClasses = cx(className, {
    [`${prefix}--slug-content`]: true
  });
  return /*#__PURE__*/React__default.createElement(ToggletipContent, {
    className: slugContentClasses,
    ref: ref
  }, children);
});
SlugContent.propTypes = {
  /**
   * Specify the content you want rendered inside the slug ToggleTip
   */
  children: PropTypes.node,
  /**
   * Specify an optional className to be added to the AI slug callout
   */
  className: PropTypes.string
};
const SlugActions = /*#__PURE__*/React__default.forwardRef(function SlugActions(_ref2, ref) {
  let {
    children,
    className
  } = _ref2;
  const prefix = usePrefix();
  const slugActionBarClasses = cx(className, {
    [`${prefix}--slug-actions`]: true
  });
  return /*#__PURE__*/React__default.createElement(ToggletipActions, {
    className: slugActionBarClasses,
    ref: ref
  }, children);
});
SlugActions.propTypes = {
  /**
   * Specify the content you want rendered inside the slug callout toolbar
   */
  children: PropTypes.node,
  /**
   * Specify an optional className to be added to the AI slug toolbar
   */
  className: PropTypes.string
};
const Slug = /*#__PURE__*/React__default.forwardRef(function Slug(_ref3, ref) {
  let {
    aiText = 'AI',
    aiTextLabel,
    align,
    autoAlign = true,
    children,
    className,
    dotType,
    kind = 'default',
    onRevertClick,
    revertActive,
    revertLabel = 'Revert to AI input',
    slugLabel = 'Show information',
    size = 'xs',
    ...rest
  } = _ref3;
  const prefix = usePrefix();
  const id = useId('slug');
  const slugClasses = cx(className, {
    [`${prefix}--slug`]: true,
    [`${prefix}--slug--hollow`]: kind === 'hollow' || dotType === 'hollow',
    // Need to come up with a better name; explainable?
    // Need to be able to target the non-hollow variant another way
    // other than using `:not` all over the styles
    [`${prefix}--slug--enabled`]: kind !== 'hollow' && dotType !== 'hollow',
    [`${prefix}--slug--revert`]: revertActive
  });
  const slugButtonClasses = cx({
    [`${prefix}--slug__button`]: true,
    [`${prefix}--slug__button--${size}`]: size,
    [`${prefix}--slug__button--${kind}`]: kind,
    [`${prefix}--slug__button--inline-with-content`]: kind === 'inline' && aiTextLabel
  });
  const handleOnRevertClick = evt => {
    if (onRevertClick) {
      onRevertClick(evt);
    }
  };
  const ariaLabel = !aiTextLabel ? `${aiText} - ${slugLabel}` : `${aiText} - ${aiTextLabel}`;
  return /*#__PURE__*/React__default.createElement("div", {
    className: slugClasses,
    ref: ref,
    id: id
  }, revertActive ? /*#__PURE__*/React__default.createElement(IconButton, _extends({
    onClick: handleOnRevertClick,
    kind: "ghost",
    size: "sm",
    label: revertLabel
  }, rest), _Undo || (_Undo = /*#__PURE__*/React__default.createElement(Undo, null))) : /*#__PURE__*/React__default.createElement(Toggletip, _extends({
    align: align,
    autoAlign: autoAlign
  }, rest), /*#__PURE__*/React__default.createElement(ToggletipButton, {
    className: slugButtonClasses,
    label: ariaLabel
  }, /*#__PURE__*/React__default.createElement("span", {
    className: `${prefix}--slug__text`
  }, aiText), aiTextLabel && /*#__PURE__*/React__default.createElement("span", {
    className: `${prefix}--slug__additional-text`
  }, aiTextLabel)), children));
});
Slug.displayName = 'Slug';
Slug.propTypes = {
  /**
   * Specify the correct translation of the AI text
   */
  aiText: PropTypes.string,
  /**
   * Specify additional text to be rendered next to the AI label in the inline variant
   */
  aiTextLabel: PropTypes.string,
  /**
   * Specify how the popover should align with the button
   */
  align: PropTypes.oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top']),
  /**
   * Will auto-align the popover on first render if it is not visible. This prop is currently experimental and is subject to future changes.
   */
  autoAlign: PropTypes.bool,
  /**
   * Specify the content you want rendered inside the slug ToggleTip
   */
  children: PropTypes.node,
  /**
   * Specify an optional className to be added to the AI slug
   */
  className: PropTypes.string,
  /**
   * Specify the type of dot that should be rendered in front of the inline variant
   */
  dotType: PropTypes.oneOf(['default', 'hollow']),
  /**
   * Specify the type of Slug, from the following list of types:
   */
  kind: PropTypes.oneOf(['default', 'hollow', 'inline']),
  /**
   * Callback function that fires when the revert button is clicked
   */
  onRevertClick: PropTypes.func,
  /**
   * Specify whether the revert button should be visible
   */
  revertActive: PropTypes.bool,
  /**
   * Specify the text that should be shown when the revert button is hovered
   */
  revertLabel: PropTypes.string,
  /**
   * Specify the size of the button, from the following list of sizes:
   */
  size: PropTypes.oneOf(['mini', '2xs', 'xs', 'sm', 'md', 'lg', 'xl']),
  /**
   * Specify the content you want rendered inside the slug ToggleTip
   */
  slugContent: PropTypes.node,
  /**
   * Specify the text that will be provided to the aria-label of the `Slug` button
   */
  slugLabel: PropTypes.string
};

export { Slug, SlugActions, SlugContent };
