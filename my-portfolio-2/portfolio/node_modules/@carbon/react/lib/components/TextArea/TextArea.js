/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var deprecate = require('../../prop-types/deprecate.js');
var iconsReact = require('@carbon/icons-react');
var usePrefix = require('../../internal/usePrefix.js');
require('../FluidForm/FluidForm.js');
var FormContext = require('../FluidForm/FormContext.js');
var useAnnouncer = require('../../internal/useAnnouncer.js');
var useIsomorphicEffect = require('../../internal/useIsomorphicEffect.js');
var useMergedRefs = require('../../internal/useMergedRefs.js');
var setupGetInstanceId = require('../../tools/setupGetInstanceId.js');
var noopFn = require('../../internal/noopFn.js');
require('../Text/index.js');
var Text = require('../Text/Text.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

const getInstanceId = setupGetInstanceId["default"]();
const TextArea = /*#__PURE__*/React__default["default"].forwardRef((props, forwardRef) => {
  const {
    className,
    disabled = false,
    id,
    labelText,
    hideLabel,
    onChange = noopFn.noopFn,
    onClick = noopFn.noopFn,
    invalid = false,
    invalidText = '',
    helperText = '',
    light,
    placeholder = '',
    enableCounter = false,
    maxCount = undefined,
    counterMode = 'character',
    warn = false,
    warnText = '',
    rows = 4,
    slug,
    ...other
  } = props;
  const prefix = usePrefix.usePrefix();
  const {
    isFluid
  } = React.useContext(FormContext.FormContext);
  const {
    defaultValue,
    value
  } = other;
  const {
    current: textAreaInstanceId
  } = React.useRef(getInstanceId());
  const textareaRef = React.useRef(null);
  const ref = useMergedRefs.useMergedRefs([forwardRef, textareaRef]);
  function getInitialTextCount() {
    const targetValue = defaultValue || value || textareaRef.current?.value || '';
    const strValue = targetValue.toString();
    if (counterMode === 'character') {
      return strValue.length;
    } else {
      return strValue.match(/\w+/g)?.length || 0;
    }
  }
  const [textCount, setTextCount] = React.useState(getInitialTextCount());
  React.useEffect(() => {
    setTextCount(getInitialTextCount());
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [value, defaultValue, counterMode]);
  useIsomorphicEffect["default"](() => {
    if (other.cols && textareaRef.current) {
      textareaRef.current.style.width = '';
      textareaRef.current.style.resize = 'none';
    } else if (textareaRef.current) {
      textareaRef.current.style.width = `100%`;
    }
  }, [other.cols]);
  const textareaProps = {
    id,
    onKeyDown: evt => {
      if (!disabled && enableCounter && counterMode === 'word') {
        const key = evt.which;
        if (maxCount && textCount >= maxCount && key === 32) {
          evt.preventDefault();
        }
      }
    },
    onPaste: evt => {
      if (!disabled) {
        if (counterMode === 'word' && enableCounter && typeof maxCount !== 'undefined' && textareaRef.current !== null) {
          const existingWords = textareaRef.current.value.match(/\w+/g) || [];
          const pastedWords = evt.clipboardData.getData('Text').match(/\w+/g) || [];
          const totalWords = existingWords.length + pastedWords.length;
          if (totalWords > maxCount) {
            evt.preventDefault();
            const allowedWords = existingWords.concat(pastedWords).slice(0, maxCount);
            setTimeout(() => {
              setTextCount(maxCount);
            }, 0);
            textareaRef.current.value = allowedWords.join(' ');
          }
        }
      }
    },
    onChange: evt => {
      if (!disabled) {
        if (counterMode == 'character') {
          evt?.persist?.();
          // delay textCount assignation to give the textarea element value time to catch up if is a controlled input
          setTimeout(() => {
            setTextCount(evt.target?.value?.length);
          }, 0);
        } else if (counterMode == 'word') {
          if (!evt.target.value) {
            setTimeout(() => {
              setTextCount(0);
            }, 0);
            return;
          }
          if (enableCounter && typeof maxCount !== 'undefined' && textareaRef.current !== null) {
            const matchedWords = evt.target?.value?.match(/\w+/g);
            if (matchedWords && matchedWords.length <= maxCount) {
              textareaRef.current.removeAttribute('maxLength');
              setTimeout(() => {
                setTextCount(matchedWords.length);
              }, 0);
            } else if (matchedWords && matchedWords.length > maxCount) {
              setTimeout(() => {
                setTextCount(matchedWords.length);
              }, 0);
            }
          }
        }
        if (onChange) {
          onChange(evt);
        }
      }
    },
    onClick: evt => {
      if (!disabled && onClick) {
        onClick(evt);
      }
    }
  };
  const formItemClasses = cx__default["default"](`${prefix}--form-item`, className);
  const textAreaWrapperClasses = cx__default["default"](`${prefix}--text-area__wrapper`, {
    [`${prefix}--text-area__wrapper--readonly`]: other.readOnly,
    [`${prefix}--text-area__wrapper--warn`]: warn,
    [`${prefix}--text-area__wrapper--slug`]: slug
  });
  const labelClasses = cx__default["default"](`${prefix}--label`, {
    [`${prefix}--visually-hidden`]: hideLabel && !isFluid,
    [`${prefix}--label--disabled`]: disabled
  });
  const textareaClasses = cx__default["default"](`${prefix}--text-area`, {
    [`${prefix}--text-area--light`]: light,
    [`${prefix}--text-area--invalid`]: invalid,
    [`${prefix}--text-area--warn`]: warn
  });
  const counterClasses = cx__default["default"](`${prefix}--label`, {
    [`${prefix}--label--disabled`]: disabled
  });
  const helperTextClasses = cx__default["default"](`${prefix}--form__helper-text`, {
    [`${prefix}--form__helper-text--disabled`]: disabled
  });
  const label = labelText ? /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    as: "label",
    htmlFor: id,
    className: labelClasses
  }, labelText) : null;
  const counter = enableCounter && maxCount && (counterMode === 'character' || counterMode === 'word') ? /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    as: "div",
    className: counterClasses
  }, `${textCount}/${maxCount}`) : null;
  const helperId = !helperText ? undefined : `text-area-helper-text-${textAreaInstanceId}`;
  const helper = helperText ? /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    as: "div",
    id: helperId,
    className: helperTextClasses
  }, helperText) : null;
  const errorId = id + '-error-msg';
  const error = invalid ? /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    as: "div",
    role: "alert",
    className: `${prefix}--form-requirement`,
    id: errorId
  }, invalidText, isFluid && /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningFilled, {
    className: `${prefix}--text-area__invalid-icon`
  })) : null;
  const warning = warn ? /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    as: "div",
    role: "alert",
    className: `${prefix}--form-requirement`
  }, warnText, isFluid && /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningAltFilled, {
    className: `${prefix}--text-area__invalid-icon ${prefix}--text-area__invalid-icon--warning`
  })) : null;
  let ariaDescribedBy;
  if (invalid) {
    ariaDescribedBy = errorId;
  } else if (!invalid && !warn && !isFluid && helperText) {
    ariaDescribedBy = helperId;
  }
  if (enableCounter) {
    // handle different counter mode
    if (counterMode == 'character') {
      textareaProps.maxLength = maxCount;
    }
  }
  const ariaAnnouncement = useAnnouncer.useAnnouncer(textCount, maxCount, counterMode === 'word' ? 'words' : undefined);
  const input = /*#__PURE__*/React__default["default"].createElement("textarea", _rollupPluginBabelHelpers["extends"]({}, other, textareaProps, {
    placeholder: placeholder,
    className: textareaClasses,
    "aria-invalid": invalid,
    "aria-describedby": ariaDescribedBy,
    disabled: disabled,
    rows: rows,
    readOnly: other.readOnly,
    ref: ref
  }));

  // Slug is always size `mini`
  let normalizedSlug;
  if (slug && slug['type']?.displayName === 'Slug') {
    normalizedSlug = /*#__PURE__*/React__default["default"].cloneElement(slug, {
      size: 'mini'
    });
  }
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: formItemClasses
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--text-area__label-wrapper`
  }, label, counter), /*#__PURE__*/React__default["default"].createElement("div", {
    className: textAreaWrapperClasses,
    "data-invalid": invalid || null
  }, invalid && !isFluid && /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningFilled, {
    className: `${prefix}--text-area__invalid-icon`
  }), warn && !invalid && !isFluid && /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningAltFilled, {
    className: `${prefix}--text-area__invalid-icon ${prefix}--text-area__invalid-icon--warning`
  }), input, normalizedSlug, /*#__PURE__*/React__default["default"].createElement("span", {
    className: `${prefix}--text-area__counter-alert`,
    role: "alert"
  }, ariaAnnouncement), isFluid && /*#__PURE__*/React__default["default"].createElement("hr", {
    className: `${prefix}--text-area__divider`
  }), isFluid && invalid ? error : null, isFluid && warn && !invalid ? warning : null), !invalid && !warn && !isFluid ? helper : null, invalid && !isFluid ? error : null, warn && !invalid && !isFluid ? warning : null);
});
TextArea.displayName = 'TextArea';
TextArea.propTypes = {
  /**
   * Provide a custom className that is applied directly to the underlying
   * `<textarea>` node
   */
  className: PropTypes__default["default"].string,
  /**
   * Specify the `cols` attribute for the underlying `<textarea>` node
   */
  cols: PropTypes__default["default"].number,
  /**
   * Specify the method used for calculating the counter number
   */
  counterMode: PropTypes__default["default"].oneOf(['character', 'word']),
  /**
   * Optionally provide the default value of the `<textarea>`
   */
  defaultValue: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
  /**
   * Specify whether the control is disabled
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * Specify whether to display the counter
   */
  enableCounter: PropTypes__default["default"].bool,
  /**
   * Provide text that is used alongside the control label for additional help
   */
  helperText: PropTypes__default["default"].node,
  /**
   * Specify whether you want the underlying label to be visually hidden
   */
  hideLabel: PropTypes__default["default"].bool,
  /**
   * Provide a unique identifier for the control
   */
  id: PropTypes__default["default"].string,
  /**
   * Specify whether the control is currently invalid
   */
  invalid: PropTypes__default["default"].bool,
  /**
   * Provide the text that is displayed when the control is in an invalid state
   */
  invalidText: PropTypes__default["default"].node,
  /**
   * Provide the text that will be read by a screen reader when visiting this
   * control
   */
  labelText: PropTypes__default["default"].node.isRequired,
  /**
   * `true` to use the light version. For use on $ui-01 backgrounds only.
   * Don't use this to make tile background color same as container background color.
   */
  light: deprecate["default"](PropTypes__default["default"].bool, 'The `light` prop for `TextArea` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),
  /**
   * Max entity count allowed for the textarea. This is needed in order for enableCounter to display
   */
  maxCount: PropTypes__default["default"].number,
  /**
   * Optionally provide an `onChange` handler that is called whenever `<textarea>`
   * is updated
   */
  onChange: PropTypes__default["default"].func,
  /**
   * Optionally provide an `onClick` handler that is called whenever the
   * `<textarea>` is clicked
   */
  onClick: PropTypes__default["default"].func,
  /**
   * Specify the placeholder attribute for the `<textarea>`
   */
  placeholder: PropTypes__default["default"].string,
  /**
   * Whether the textarea should be read-only
   */
  readOnly: PropTypes__default["default"].bool,
  /**
   * Specify the rows attribute for the `<textarea>`
   */
  rows: PropTypes__default["default"].number,
  /**
   * **Experimental**: Provide a `Slug` component to be rendered inside the `TextArea` component
   */
  slug: PropTypes__default["default"].node,
  /**
   * Provide the current value of the `<textarea>`
   */
  value: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
  /**
   * Specify whether the control is currently in warning state
   */
  warn: PropTypes__default["default"].bool,
  /**
   * Provide the text that is displayed when the control is in warning state
   */
  warnText: PropTypes__default["default"].node
};

exports["default"] = TextArea;
